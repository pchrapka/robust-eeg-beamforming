function params = get_config(cfg)
%GET_CONFIG returns a config of simulation variables
%   GET_CONFIG(CFG) returns a config of simulation variables specified
%   by CFG.
%   
%   Input
%   cfg.id      
%       id for simulation parameters config
%   cfg.data
%       config describing data files to use during the simulation see
%       sim_vars.get_data_files
%   cfg.head
%       (optional) head model config, default is
%       'head_Default1_3sphere_500V.mat'
%       head.type    'brainstorm' or 'fieldtrip'
%       head.file    head model file name in head-models project
%   cfg.loc
%       (optional) locations to scan specified as indices in the head model
%       struct, default is 1:501
%   cfg.tag
%       additional tag for the output file
%   cfg.force   
%       adds a flag that forces the analysis to be redone, overwriting the
%       existing output files
%   
%   NOTE New configs need to be added here explicity.

k = 1;
if isfield(cfg, 'data')
    params(k).name = 'data_file';
    params(k).values = sim_vars.get_data_files(cfg.data);
    k = k+1;
else
    warning('sim_vars:get_config',...
        'no data files specified');
end 

% Head model
if ~isfield(cfg,'head')
    cfg.head.type = 'brainstorm';
    cfg.head.file = 'head_Default1_3sphere_500V.mat';
end
params(k).name = 'head_cfg';
params(k).values = {cfg.head};
k = k+1;

% Beamformer locations
if ~isfield(cfg,'loc')
    cfg.loc = 1:501;
end
params(k).name = 'loc';
params(k).values = {cfg.loc};
k = k+1;

if isfield(cfg, 'tag')
    params(k).name = 'tag';
    params(k).values = {cfg.tag};
    k = k+1;
end

% Beamformer configs
params(k).name = 'beamformer_config';
params(k).values = {};

switch cfg.id
    case 'sim_vars_test'
        
        % Beamformer locations
        idx = sim_vars.get_param_idx(params, 'loc');
        params(idx).values = {1:2};
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',2},...
            {'BeamformerLCMV','regularization','eig'}};
        
    case 'sim_vars_test_rmv_aniso'
        
        % Beamformer locations
        idx = sim_vars.get_param_idx(params, 'loc');
        params(idx).values = {1:2};
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','aniso',true},...
            {'BeamformerRMV','aniso',true,'eig_type','eig post','ninterference',1}};
        
    case 'sim_vars_test_mismatch'
       
        % Beamformer locations
        idx = sim_vars.get_param_idx(params, 'loc');
        params(idx).values = {1:2};
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',2},...
            {'BeamformerLCMV','regularization','eig'}};
        
        % Mismatch covariance matrix
        idx = length(params) + 1;
        params(idx).name = 'perturb_config';
        params(idx).values = {...
            'perturb_1',...
            'perturb_2'};
        
    case 'sim_vars_lcmv_basic'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','regularization','eig'}};
        
    case 'sim_vars_lcmv'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',1},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',2},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',3},...
            {'BeamformerLCMV','regularization','eig'}};
        
    case 'sim_vars_lcmv_mismatch'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',1},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',2},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',3},...
            {'BeamformerLCMV','regularization','eig'}};
        
        % Mismatch covariance matrix
        idx = length(params) + 1;
        params(idx).name = 'perturb_config';
        params(idx).values = {...
            'perturb_1',...
            'perturb_2'};   
        
    case 'sim_vars_rmv'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerRMV','epsilon',100},...
            {'BeamformerRMV','epsilon',150},...
            {'BeamformerRMV','epsilon',200},...
            {'BeamformerRMV','epsilon',250},...
            {'BeamformerRMV','epsilon',300},...
            {'BeamformerRMV','epsilon',350},...
            {'BeamformerRMV','epsilon',400}};      
        
    case 'sim_vars_rmv_coarse'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerRMV','epsilon',100},...
            {'BeamformerRMV','epsilon',200},...
            {'BeamformerRMV','epsilon',300},...
            {'BeamformerRMV','epsilon',400}};
        
    case 'sim_vars_rmv_coarse_mismatch'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerRMV','epsilon',100},...
            {'BeamformerRMV','epsilon',200},...
            {'BeamformerRMV','epsilon',300},...
            {'BeamformerRMV','epsilon',400}};
        
        % Mismatch covariance matrix
        idx = length(params) + 1;
        params(idx).name = 'perturb_config';
        params(idx).values = {...
            'perturb_1',...
            'perturb_2'};      
        
    case 'sim_vars_rmv_eig_coarse'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',50},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',100},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',200},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',300},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',400}};
        
    case 'sim_vars_rmv_eig_coarse_mismatch'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',50},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',100},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',200},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',300},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',400}};
        
        % Mismatch covariance matrix
        idx = length(params) + 1;
        params(idx).name = 'perturb_config';
        params(idx).values = {...
            'perturb_1',...
            'perturb_2'};
        
    case 'sim_vars_rmv_eig_experiment'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',0.0001},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',0.001},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',0.01},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',0.1},...
            {'BeamformerRMV','eig_type','eig post','ninterference',1,'epsilon',1}};
        
    case 'sim_vars_single_src_paper_matched'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',10},...
            {'BeamformerRMV','epsilon',20},...
            {'BeamformerRMV','epsilon',30},...
            {'BeamformerRMV','epsilon',40},...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerRMV','eig_type','eig post','ninterference',0','epsilon',20},...
            {'BeamformerRMV','eig_type','eig pre cov','ninterference',0','epsilon',20},...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',0},...
            {'BeamformerLCMV','regularization','eig'}};
        
    case 'sim_vars_single_src_paper_mismatched'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerRMV','epsilon',100},...
            {'BeamformerRMV','epsilon',150},...
            {'BeamformerRMV','epsilon',200},...
            {'BeamformerRMV','epsilon',250},...
            {'BeamformerRMV','epsilon',300},...
            {'BeamformerRMV','aniso',true},...
            {'BeamformerRMV','eig_type','eig post','ninterference',0','epsilon',150},...
            {'BeamformerRMV','eig_type','eig post','ninterference',0','epsilon',200},...
            {'BeamformerRMV','eig_type','eig pre cov','ninterference',0','epsilon',150},...
            {'BeamformerRMV','eig_type','eig pre cov','ninterference',0','epsilon',200},...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',0},...
            {'BeamformerLCMV','regularization','eig'}};
        
    case 'sim_vars_single_src_eig_variations_mismatched'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerRMV','epsilon',100},...
            {'BeamformerRMV','epsilon',150},...
            {'BeamformerRMV','epsilon',200},...
            {'BeamformerRMV','aniso',true},...
            {'BeamformerRMV','eig_type','eig post','ninterference',0,'epsilon',50},...
            {'BeamformerRMV','eig_type','eig post','ninterference',0,'epsilon',100},...
            {'BeamformerRMV','eig_type','eig post','ninterference',0,'epsilon',150},...
            {'BeamformerRMV','eig_type','eig post','ninterference',0,'epsilon',200},...
            {'BeamformerRMV','aniso',true,'eig_type','eig post','ninterference',0},...
            {'BeamformerRMV','eig_type','eig pre cov','ninterference',0,'epsilon',0.0001},...
            {'BeamformerRMV','eig_type','eig pre cov','ninterference',0,'epsilon',0.001},...
            {'BeamformerRMV','eig_type','eig pre cov','ninterference',0,'epsilon',0.01},...
            {'BeamformerRMV','eig_type','eig pre cov','ninterference',0,'epsilon',0.1},...
            {'BeamformerRMV','eig_type','eig pre cov','ninterference',0,'epsilon',1},...
            {'BeamformerRMV','eig_type','eig pre cov','ninterference',0,'epsilon',10},...
            {'BeamformerRMV','eig_type','eig pre cov','ninterference',0,'epsilon',100},...
            {'BeamformerRMV','aniso',true,'eig_type','eig pre cov','ninterference',0},...
            {'BeamformerRMV','eig_type','eig pre leadfield','ninterference',0,'epsilon',0.0001},...
            {'BeamformerRMV','eig_type','eig pre leadfield','ninterference',0,'epsilon',0.001},...
            {'BeamformerRMV','eig_type','eig pre leadfield','ninterference',0,'epsilon',0.01},...
            {'BeamformerRMV','eig_type','eig pre leadfield','ninterference',0,'epsilon',0.1},...
            {'BeamformerRMV','eig_type','eig pre leadfield','ninterference',0,'epsilon',1},...
            {'BeamformerRMV','eig_type','eig pre leadfield','ninterference',0,'epsilon',10},...
            {'BeamformerRMV','eig_type','eig pre leadfield','ninterference',0,'epsilon',100},...
            {'BeamformerRMV','eig_type','eig pre leadfield','ninterference',0,'epsilon',1000},...
            {'BeamformerRMV','aniso',true,'eig_type','eig pre leadfield','ninterference',0},...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',0},...
            {'BeamformerLCMV','regularization','eig'}};
        
    case 'sim_vars_mult_src_basic_matched'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerLCMV'},...
            {'BeamformerRMV','epsilon',0.01},...
            {'BeamformerRMV','epsilon',5}};
        
    case 'sim_vars_mult_src_basic_mismatched'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerLCMV'},...
            ...{'BeamformerRMV','epsilon',0.01},...
            ...{'BeamformerRMV','epsilon',5},...
            {'BeamformerRMV','aniso',true}};
        
    case 'sim_vars_mult_src_paper_matched'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',10},...
            {'BeamformerRMV','epsilon',20},...
            {'BeamformerRMV','epsilon',30},...
            {'BeamformerRMV','epsilon',40},...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',0},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',1},...
            {'BeamformerLCMV','regularization','eig'}};
        
    case 'sim_vars_mult_src_paper_mismatched'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerRMV','epsilon',100},...
            {'BeamformerRMV','epsilon',150},...
            {'BeamformerRMV','epsilon',200},...
            {'BeamformerRMV','epsilon',250},...
            {'BeamformerRMV','epsilon',300},...
            {'BeamformerRMV','aniso',true},...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',0},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',1},...
            {'BeamformerLCMV','regularization','eig'}};        
        
    case 'sim_vars_distr_src_paper_matched'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',10},...
            {'BeamformerRMV','epsilon',20},...
            {'BeamformerRMV','epsilon',30},...
            {'BeamformerRMV','epsilon',40},...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',0},...
            {'BeamformerLCMV','regularization','eig'}};
        
    case 'sim_vars_distr_src_paper_mismatched'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerRMV','epsilon',100},...
            {'BeamformerRMV','epsilon',150},...
            {'BeamformerRMV','epsilon',200},...
            {'BeamformerRMV','epsilon',250},...
            {'BeamformerRMV','epsilon',300},...
            {'BeamformerRMV','aniso',true},...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',0},...
            {'BeamformerLCMV','regularization','eig'}};
        
    case 'sim_vars_mult_src_beampattern_matched'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',10},...
            {'BeamformerRMV','epsilon',20},...
            {'BeamformerRMV','epsilon',30},...
            {'BeamformerRMV','epsilon',40},...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',0},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',1},...
            {'BeamformerLCMV','regularization','eig'}};
        
    case 'sim_vars_mult_src_beampattern_mismatched'
        
        % Beamformer configs
        idx = sim_vars.get_param_idx(params, 'beamformer_config');
        params(idx).values = {...
            {'BeamformerRMV','epsilon',50},...
            {'BeamformerRMV','epsilon',100},...
            {'BeamformerRMV','epsilon',150},...
            {'BeamformerRMV','epsilon',200},...
            {'BeamformerRMV','epsilon',250},...
            {'BeamformerRMV','epsilon',300},...
            {'BeamformerRMV','aniso',true},...
            {'BeamformerLCMV'},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',0},...
            {'BeamformerLCMV','eigenspace',true,'ninterference',1},...
            {'BeamformerLCMV','regularization','eig'}};            

    otherwise
        error('sim_vars:get_config',...
            'unknown sim_vars configuration');
        
end

if cfg.force
    idx = length(params) + 1;
    params(idx).name = 'force';
    params(idx).values = {cfg.force};
end

if isfield(cfg, 'time_idx')
    idx = length(params) + 1;
    params(idx).name = 'time_idx';
    params(idx).values = {cfg.time_idx};
end

end
