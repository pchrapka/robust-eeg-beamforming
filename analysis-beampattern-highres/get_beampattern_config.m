function cfg = get_beampattern_config(type, matched, snr)

cfg = [];

%% Set up beamformer configs
if matched
    %% ==== MATCHED LEADFIELD ====
    % Set up beamformer data sets to process
    cfg.beam_cfgs = {...
        'rmv_epsilon_10',...
        'rmv_epsilon_20',...
        'rmv_epsilon_30',...
        'rmv_epsilon_40',...
        'rmv_epsilon_50',...
        'lcmv',...
        'lcmv_eig_1',...
        'lcmv_reg_eig'...
        };
else
    %% ==== MISMATCHED LEADFIELD ====
    % Set up beamformer data sets to process
    cfg.beam_cfgs = {...
        'rmv_epsilon_50_3sphere',...
        'rmv_epsilon_100_3sphere',...
        'rmv_epsilon_150_3sphere',...
        'rmv_epsilon_200_3sphere',...
        'rmv_aniso_3sphere',...
        'lcmv_3sphere',...
        'lcmv_eig_1_3sphere',...
        'lcmv_reg_eig_3sphere'};
end

switch type
    case 'highres'
        voxel_idx = 5440;
        interference_idx = 13841;
        source_name = 'mult_cort_src_17hd';
        sim_name = 'sim_data_bemhd_1_100t';
    otherwise
        error('unknown beampattern config type %s',type);
end

cfg.source_idx = voxel_idx;

args = {};
if ~isempty(interference_idx)
    args = [args {'int_idx',interference_idx}];
end
cfg.args = args;

% Set up simulation info
cfg.data_set = SimDataSetEEG(...
    sim_name,...
    source_name,...
    snr,...
    'iter',1);

end