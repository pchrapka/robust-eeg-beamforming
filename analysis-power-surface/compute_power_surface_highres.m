function cfg = compute_power_surface_highres(source_name, matched, snr)
%COMPUTE_POWER_SURFACE_HIGHRES computes beamformer output power for
%high-resolution results
%   COMPUTE_POWER_SURFACE_HIGHRES computes beamformer output power for
%   high-resolution results

%% ==== FIRST SOURCE ==== %%
voxel_idx = 5440;
interference_idx = [];
if ~isempty(strfind(source_name,'mult'))
    interference_idx = 13841;
end

%% Set up the config
cfg = [];
cfg.force = false;
% Sample index for beampattern calculation
cfg.voxel_idx = voxel_idx;
if ~isempty(interference_idx)
    cfg.interference_idx = interference_idx;
end

% Set up simulation info
cfg.data_set.sim_name = 'sim_data_bemhd_1_100t';
cfg.data_set.source_name = source_name;
cfg.data_set.snr = snr;
cfg.data_set.iteration = '1';
if matched
    hmfactory = HeadModel();
    cfg.head = hmfactory.createHeadModel('brainstorm', 'head_Default1_bem_15028V.mat');
else
    hmfactory = HeadModel();
    cfg.head = hmfactory.createHeadModel('brainstorm', 'head_Default1_3sphere_15028V.mat');
end

%% Set up beamformer configs
if matched
    %% ==== MATCHED LEADFIELD ====
    % Set up beamformer data sets to process
    if ~isempty(strfind(source_name,'mult'))
        cfg.beam_cfgs = {...
            'rmv_epsilon_10',...
            'rmv_epsilon_20',...
            'rmv_epsilon_30',...
            'rmv_epsilon_40',...
            'rmv_epsilon_50',...
            'lcmv',...
            'lcmv_eig_1',...
            'lcmv_reg_eig'...
            };
    else
        cfg.beam_cfgs = {...
            'rmv_epsilon_10',...
            'rmv_epsilon_20',...
            'rmv_epsilon_30',...
            'rmv_epsilon_40',...
            'rmv_epsilon_50',...
            'lcmv',...
            'lcmv_eig_0',...
            'lcmv_reg_eig'...
            };
    end
else
    %% ==== MISMATCHED LEADFIELD ====
    % Set up beamformer data sets to process
    if ~isempty(strfind(source_name,'mult'))
        cfg.beam_cfgs = {...
            'rmv_epsilon_50_3sphere',...
            'rmv_epsilon_100_3sphere',...
            'rmv_epsilon_150_3sphere',...
            'rmv_epsilon_200_3sphere',...
            'rmv_aniso_3sphere',...
            'lcmv_3sphere',...
            'lcmv_eig_1_3sphere',...
            'lcmv_reg_eig_3sphere'};
    else
        cfg.beam_cfgs = {...
            'rmv_epsilon_50_3sphere',...
            'rmv_epsilon_100_3sphere',...
            'rmv_epsilon_150_3sphere',...
            'rmv_epsilon_200_3sphere',...
            'rmv_aniso_3sphere',...
            'lcmv_3sphere',...
            'lcmv_eig_0_3sphere',...
            'lcmv_reg_eig_3sphere'};
    end
end

%% Compute the beamformer output power
cfg = compute_power(cfg);

end