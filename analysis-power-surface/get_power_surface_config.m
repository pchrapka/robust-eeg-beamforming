function cfg = get_power_surface_config(type,source_name, matched, snr)
%GET_POWER_SURFACE_CONFIG returns a config for compute_power
%   GET_POWER_SURFACE_CONFIG returns a config for compute_power

cfg = [];

%% Set up beamformer configs
if matched
    %% ==== MATCHED LEADFIELD ====
    % Set up beamformer data sets to process
    if ~isempty(strfind(source_name,'mult'))
        cfg.beam_cfgs = {...
            'rmv_epsilon_10',...
            'rmv_epsilon_20',...
            'rmv_epsilon_30',...
            'rmv_epsilon_40',...
            'rmv_epsilon_50',...
            'lcmv',...
            'lcmv_eig_1',...
            'lcmv_reg_eig'...
            };
    else
        cfg.beam_cfgs = {...
            'rmv_epsilon_10',...
            'rmv_epsilon_20',...
            'rmv_epsilon_30',...
            'rmv_epsilon_40',...
            'rmv_epsilon_50',...
            'lcmv',...
            'lcmv_eig_0',...
            'lcmv_reg_eig'...
            };
    end
else
    %% ==== MISMATCHED LEADFIELD ====
    % Set up beamformer data sets to process
    if ~isempty(strfind(source_name,'mult'))
        cfg.beam_cfgs = {...
            'rmv_epsilon_50_3sphere',...
            'rmv_epsilon_100_3sphere',...
            'rmv_epsilon_150_3sphere',...
            'rmv_epsilon_200_3sphere',...
            'rmv_aniso_3sphere',...
            'lcmv_3sphere',...
            'lcmv_eig_1_3sphere',...
            'lcmv_reg_eig_3sphere'};
    else
        cfg.beam_cfgs = {...
            'rmv_epsilon_50_3sphere',...
            'rmv_epsilon_100_3sphere',...
            'rmv_epsilon_150_3sphere',...
            'rmv_epsilon_200_3sphere',...
            'rmv_aniso_3sphere',...
            'lcmv_3sphere',...
            'lcmv_eig_0_3sphere',...
            'lcmv_reg_eig_3sphere'};
    end
end


switch type
    case 'highres'
        
        %% ==== FIRST SOURCE ==== %%
        voxel_idx = 5440;
        interference_idx = [];
        if ~isempty(strfind(source_name,'mult'))
            interference_idx = 13841;
        end

    case 'lowres'
        voxel_idx = 295;
        interference_idx = [];
        if ~isempty(strfind(source_name,'mult'))
            interference_idx = 400;
        end
        
    otherwise
        error('unknown power surface config type %s',type);
end

args = {'force',false,'source_idx',voxel_idx};
if ~isempty(interference_idx)
    args = [args {'int_idx',interference_idx}];
end
cfg.args = args;

% Set up simulation info
cfg.data_set = SimDataSetEEG(...
    'sim_data_bem_1_100t',...
    source_name,...
    snr,...
    'iter',1);

end